처음 접근 시 벡터 집합의 개수는 N/2 (N은 짝수로만 주어짐) 이기 때문에 백트래킹을 통해 모든 쌍을 구한 뒤 각 벡터간의 거리를 구하여
비교하는 식으로 구현했다.
하지만 이 방식은 몇몇 케이스들을 고려하지 못했다.
ex) 1 2 3 4 5 6 의 점이 있다고 가정하자
이때 나뉘는 벡터 집합의 가지수는 12, 34, 56 // 13, 24, 56 // 14, 23, 56 등등 나오게 되는데
내가 처음 구현한 pick 함수는 12 ... , 13 ... , 14 ... , 15 ... , 16 ... , 순으로 체크하다보니 나중에 13,25,46 과 같은 케이스를 고려하지 못했다.

다른 풀이 방식을 고안하던 중 벡터의 성질에 따라 시작점을 정하고 나머지를 도착점이라고 생각하여 
백트래킹을 통해 시작점만 골라준 뒤 나머지는 전부 도착점으로 처리해 한 번에 벡터 연산을 수행했다.
ex) v1(5,5), v2(5,-5), v3(-5,5), v4(-5,-5) 라고 할 때,
    시작점이 v1과 v2이고 도착점이 v3과 v4라고 한다면 
    벡터 연산은 sqrt(pow((-5) + (-5) + (-5) + (-5),2) + pow(-(-5) + 5 + 5 + (-5),2))가 된다
    -> 시작점의 좌표들은 빼주고, 도착점의 좌표들은 더해줌
가상의 시작점 (0,0)에서 시작하여 4개의 좌표들에 대한 벡터 연산을 한 번에 진행해준 것이다.

고등학생 때 벡터 문제집 뒤져보다가 한 번에 연산 가능한 것을 확인하여 이 방식대로 풀게 되었다.
